Parser {
    file = block*:xs space !. -> xs
    block =
        | space 'template' space name:x space '{' templateBody*:xs space '}'
            -> ["Template" x ~xs]
        | space 'pipeline' space '{' pipelineBlock*:xs space '}'
            -> ["Pipeline" ["Seq" ~xs]]
        | space name:x space '(' arg*:xs space ')'
            -> ["ApplyTemplate" x ~xs]
    templateBody = block | pipelineBlock
    pipelineBlock =
        | space 'name' !alphanum space string:x
            -> ["PipelineName" x]
        | space 'par' space '{' pipelineBlock*:xs space '}'
            -> ["Par" ~xs]
        | space 'seq' space '{' pipelineBlock*:xs space '}'
            -> ["Seq" ~xs]
        | space 'stage' space maybeName:x space '{' stageBody*:ys space '}'
            -> ["Stage" x ~ys]
        | space 'link' space '(' space name:x space name:y ')'
            -> ["Link" x y]
        | space name:x space '(' arg*:xs space ')'
            -> ["ApplyTemplate" x ~xs]
    stageBody =
        | space 'name' !alphanum space string:x
            -> ["StageName" x]
        | space 'trigger' !alphanum space triggerArg*:xs
            -> ["StageTrigger" ~xs]
        | space 'sh' !alphanum space maybeName:x space string:y
            -> ["StageSh" x y]
        | space 'out' !alphanum space name:x space string:y
            -> ["StageOut" x y]
    maybeName = name | -> ""
    triggerArg = space name:x '=' string:y -> ["TriggerArg" x y]
    arg = space name:x '=' string:y -> ["Arg" x y]
    string = '"' innerString*:xs '"' -> ["String" ~xs]
    innerString =
        | '#{' name:x '}' -> ["TemplateVar" x]
        | '${' name:x '}' -> ["InputArg" x]
        | !'"' .:x        -> ["Char" x]
    name = alpha:x alphanum*:xs -> { x xs }
    alphanum = alpha | num
    alpha = 'a'-'z' | 'A'-'Z'
    num = '0'-'9'
    space = (' ' | '\n')*
}

ToDag {
    asts = ast*:xs !.
        -> dict():templates
        -> dict():stages
        -> []:parents
        -> [~~xs]
    statements = ast*:xs !. -> xs
    ast = [%:x] -> x
    Pipeline = ast*:xs
        -> dict():pipelineProps
        -> set(pipelineProps "name" "")
        -> []:nodes
        -> []:links
        -> xs
        -> [["Pipeline" pipelineProps ~nodes ~links]]
    PipelineName = ast:x -> set(pipelineProps "name" x) -> parents
    Par = ast*:xs -> [~~xs]
    Seq = seqInner | -> parents
    seqInner =
        | ast:x seqInner:y -> x:parents -> y
        | ast:x !.         -> x
    Template = .:name .*:xs -> xs:x -> set(templates name x) -> []
    ApplyTemplate = .:name ast*:xs
        -> dict():templateArgs
        -> xs
        -> run("statements" get(templates name))
    String = ast*:xs -> { xs }
    Char = .
    TemplateVar = .:name -> get(templateArgs name)
    InputArg = .:x -> { "args[" repr(x) "]" }
    Arg = .:name ast:value -> set(templateArgs name value)
    Stage = .:varName ast*:props
        -> label():id
        -> dict():stageProps
        -> []:stageCode
        -> set(stageProps "name" { id })
        -> []:triggers
        -> set(stageProps "triggers" triggers)
        -> props
        -> set(stages varName id)
        -> add(nodes ["Node" id stageProps stageCode])
        -> run("link" parents)
        -> [id]
    StageName = ast:name -> set(stageProps "name" name)
    StageSh = .*:xs -> add(stageCode ["StageSh" ~xs])
    StageOut = .*:xs -> add(stageCode ["StageOut" ~xs])
    StageTrigger = ast*:xs
        -> dict():triggerDef
        -> xs
        -> add(triggers triggerDef)
    TriggerArg = .:x ast:y -> set(triggerDef x y)
    Link = .:parent .:child
        -> add(links ["Link" get(stages parent) get(stages child)])
    link = (.:parent -> add(links ["Link" parent id]))*
}

ToDot {
    asts     = ast*:xs !.       -> { "Digraph {\n" >
                                       "rankdir=LR;\n"
                                       xs
                                     < "}\n"
                                   }
    ast      = [%:x]            -> x
    Pipeline = .:x ast*:xs      -> { "subgraph cluster" label() " {\n" >
                                       "label=\"" get(x "name") "\";\n"
                                       xs
                                      < "}\n"
                                   }
    Node     = .:id .:props .   -> { id "[shape=rect label=\"" get(props "name") "\"];\n" }
    Link     = .:parent .:child -> { parent " -> " child ";\n" }
}

Cli {
    interpret = command:x !. -> x
    command =
        | "dot" .:x
            -> cmd_dot(x)
        | "dotty" .:x
            -> cmd_dotty(x)
        | "compile" .:x
            -> cmd_compile(x)
        | "debug_dag" .:x
            -> cmd_debug_dag(x)
        | "get_stage_definition" .:pipeline number:stageId
            -> cmd_get_stage_definition(pipeline stageId)
        | "run" args:x
            -> cmd_run(x)
    args = arg*:xs -> dict():args -> xs -> args
    arg = [name:x '=' .*:xs] -> set(args x {xs})
    name = nameChar*:xs -> { xs }
    number = digit:x digit*:xs -> int({ x xs })
    digit = '0'-'9'
    nameChar = 'a'-'z'
}

StageRunner {
    run = ast*:xs
        -> dict():out
        -> xs
        -> out
    ast = [%:x] -> x
    StageSh = .:name ast:x -> set(args name sh(x))
    StageOut = .:name ast:x -> set(out name x)
    String = ast*:xs -> { xs }
    Char = .
    InputArg = .:name -> { get(args name) }
}
