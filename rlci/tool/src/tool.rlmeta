Parser {
    file = block*:xs space !. -> xs
    block =
        | space 'par' space '{' block*:xs space '}'
            -> ["Par" ~xs]
        | space 'seq' space '{' block*:xs space '}'
            -> ["Seq" ~xs]
        | space 'template' space name:x space '{' block*:xs space '}'
            -> ["Template" x ~xs]
        | space 'link' space '(' space name:x space name:y ')'
            -> ["Link" x y]
        | space 'stage' space maybeName:x space '{' stageBody*:ys space '}'
            -> ["Stage" x ~ys]
        | space name:x space '(' arg*:xs space ')'
            -> ["ApplyTemplate" x ~xs]
    stageBody =
        | space 'name' !alphanum space string:x
            -> ["StageName" x]
        | space 'sh' !alphanum space maybeName:x space string:y
            -> ["StageSh" x y]
        | space 'out' !alphanum space name:x space string:y
            -> ["StageOut" x y]
    maybeName = name | -> ""
    arg = space name:x '=' string:y -> ["Arg" x y]
    string = '"' innerString*:xs '"' -> ["String" ~xs]
    innerString =
        | '#{' name:x '}' -> ["TemplateVar" x]
        | '${' name:x '}' -> ["InputArg" x]
        | !'"' .:x        -> ["Char" x]
    name = alpha:x alphanum*:xs -> { x xs }
    alphanum = alpha | num
    alpha = 'a'-'z' | 'A'-'Z'
    num = '0'-'9'
    space = (' ' | '\n')*
}

ToDag {
    asts = ast*:xs !.
        -> dict():templates
        -> dict():stages
        -> []:nodes
        -> []:links
        -> []:parents
        -> xs
        -> [~nodes ~links]
    statements = ast*:xs
    ast = [%:x] -> x
    Par = ast*:xs -> [~~xs]
    Seq =
        | ast:x Seq:y -> x:parents -> y
        | ast:x !.    -> x
    Template = .:name .*:xs -> xs:x -> set(templates name x) -> x
    ApplyTemplate = .:name ast*:xs
        -> dict():templateArgs
        -> xs
        -> run("statements" get(templates name))
    String = ast*:xs -> { "\"\".join([" join(xs ",") "])" }
    Char = .:x -> repr(x)
    TemplateVar = .:name -> repr(get(templateArgs name))
    InputArg = .:x -> { "args[" repr(x) "]" }
    Arg = .:name ast:value -> set(templateArgs name value)
    Stage = .:varName ast*:props
        -> label():id
        -> dict():stageProps
        -> []:stageCode
        -> set(stageProps "name" { id })
        -> props
        -> set(stages varName id)
        -> add(nodes ["Node" id {
            get(stageProps "name")
            "\n\n"
            "def stage(args):\n" >
                "output = {}\n"
                join(stageCode "\n")
                "\nreturn output\n"
            <
        }])
        -> run("link" parents)
        -> [id]
    StageName = ast:name -> set(stageProps "name" name)
    StageSh = .:name ast:command -> add(stageCode { "output[" repr(name) "] = subprocess.check_output(" command ")" })
    StageOut = .:name ast:value
    Link = .:parent .:child
        -> add(links ["Link" get(stages parent) get(stages child)])
    link = (.:parent -> add(links ["Link" parent id]))*
}

ToDot {
    asts   = ast*:xs !.       -> { "Digraph {\n" > xs < "}\n" }
    ast    = [%:x]            -> x
    Node   = .:id .:name      -> { id "[shape=rect label=" run("string" name) "];\n" }
    Link   = .:parent .:child -> { parent " -> " child ";\n" }
    string = char*:xs         -> { "\"" xs "\"" }
    char   =
        | '\n' -> "\\n"
        | '"'  -> "\\\""
        | .
}

Cli {
    interpret = command:x !. -> x
    command =
        | "dotty" .:x -> cmd_dotty(x)
        | "debug_dag" .:x -> cmd_debug_dag(x)
}
