Parser {
    file = block*:xs space !. -> xs
    block = par | seq
    innerBlock = block | stage
    par = space 'par' space '{' innerBlock*:xs space '}' -> ["Par" ~xs]
    seq = space 'seq' space '{' innerBlock*:xs space '}' -> ["Seq" ~xs]
    stage = space 'stage' space '(' name:x space ')' -> ["Stage" x]
    name = alpha:x alphaNum*:xs -> { x xs }
    alphaNum = alpha | num
    alpha = 'a'-'z' | 'A'-'Z'
    num = '0'-'9'
    space = (' ' | '\n')*
}

ToDag {
    asts = ast*:xs
        -> list():nodes
        -> list():links
        -> list():parents
        -> xs
        -> [~nodes ~links]

    ast = [%:x] -> x

    Par = ast*:xs -> [~~xs]

    Seq =
        | ast:x Seq:y -> x:parents -> y
        | ast:x !.    -> x

    Stage = .:x
        -> label():id
        -> add(nodes ["Node" id x])
        -> run("link" parents)
        -> [id]

    link = (.:parent -> add(links ["Link" parent id]))*
}

ToDot {
    asts = ast*:xs -> {
        "Digraph {\n" >
            xs
        < "}\n"
    }
    ast = [%:x] -> x
    Node = .:id .:name -> { id "[label=\"" name "\"];\n" }
    Link = .:parent .:child -> { parent " -> " child ";\n" }
}
