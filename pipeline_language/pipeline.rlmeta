Parser {
    file = statement*:xs space !. -> xs
    statement =
        | space 'par' space '{' statement*:xs space '}'
            -> ["Par" ~xs]
        | space 'seq' space '{' statement*:xs space '}'
            -> ["Seq" ~xs]
        | space 'link' space '(' space name:x space name:y ')'
            -> ["Link" x y]
        | space 'stage' space '(' name:x space ')'
            -> ["Stage" x]
    name = alpha:x alphanum*:xs -> { x xs }
    alphanum = alpha | num
    alpha = 'a'-'z' | 'A'-'Z'
    num = '0'-'9'
    space = (' ' | '\n')*
}

ToDag {
    asts = ast*:xs !.
        -> dict():nodesByName
        -> []:nodes
        -> []:links
        -> []:parents
        -> xs
        -> [~nodes ~links]
    ast = [%:x] -> x
    Par = ast*:xs -> [~~xs]
    Seq =
        | ast:x Seq:y -> x:parents -> y
        | ast:x !.    -> x
    Stage = .:name
        -> label():id
        -> set(nodesByName name id)
        -> add(nodes ["Node" id name])
        -> run("link" parents)
        -> [id]
    Link = .:parent .:child
        -> add(links ["Link" get(nodesByName parent) get(nodesByName child)])
    link = (.:parent -> add(links ["Link" parent id]))*
}

ToDot {
    asts = ast*:xs !.       -> { "Digraph {\n" > xs < "}\n" }
    ast  = [%:x]            -> x
    Node = .:id .:name      -> { id "[label=\"" name "\"];\n" }
    Link = .:parent .:child -> { parent " -> " child ";\n" }
}
